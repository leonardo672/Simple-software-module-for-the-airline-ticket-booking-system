import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import pyodbc
from database import get_connection
from datetime import datetime

class show_aviary:
    def __init__(self, root):
        self.root = root
        self.root.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≤–∏–∞—Ä–µ–π—Å—ã")
        self.root.geometry("900x500")
        self.root.configure(bg="#1c2b38")

        self.load_icons()
        self.create_widgets()
        self.load_data()

    def load_icons(self):
        try:
            self.code_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–ö–æ–¥.png").resize((20, 20)))
            self.airline_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è.png").resize((20, 20)))
            self.departure_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–∏–∑.png").resize((20, 20)))
            self.arrival_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–ø—Ä–∏–±—ã—Ç–∏–µ_–≤.png").resize((20, 20)))
            self.departure_time_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–≤—Ä–µ–º—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.png").resize((20, 20)))
            self.arrival_time_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è.png").resize((20, 20)))
            self.number_of_seats_icon = ImageTk.PhotoImage(Image.open("assets/–ê–≤–∏–∞—Ä–µ–π—Å—ã/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç.png").resize((20, 20)))
            self.booking_icon = ImageTk.PhotoImage(Image.open("assets/User_Icon.jpeg").resize((100, 100)))
            print("–ò–∫–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫: {e}")
            self.code_icon = self.airline_icon = self.departure_icon = self.arrival_icon = self.departure_time_icon = self.arrival_time_icon = self.number_of_seats_icon = None

    def create_widgets(self):
        header_frame = ttk.Frame(self.root)
        header_frame.pack(fill="x", pady=(10, 0))

        title_label = ttk.Label(header_frame, text="–°–ø–∏—Å–æ–∫ –ê–≤–∏–∞—Ä–µ–π—Å—ã")
        title_label.pack(side="left", padx=20, pady=10)

        refresh_btn = ttk.Button(header_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.load_data)
        refresh_btn.pack(side="right", padx=20, pady=10)

        manage_users_btn = ttk.Button(header_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", command=self.open_flights_management)
        manage_users_btn.pack(side="right", padx=20, pady=10)

        self.container = ttk.Frame(self.root)
        self.container.pack(fill="both", expand=True, padx=20, pady=(0, 10))

        self.canvas = tk.Canvas(self.container, bg="#FFFFFF", highlightthickness=0)
        self.canvas.pack(side="left", fill="both", expand=True)

        self.scrollbar = ttk.Scrollbar(self.container, orient="vertical", command=self.canvas.yview)
        self.scrollbar.pack(side="right", fill="y")
        self.canvas.config(yscrollcommand=self.scrollbar.set)

        self.canvas_frame = ttk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.canvas_frame, anchor="nw")

        footer_frame = ttk.Frame(self.root, height=30)
        footer_frame.pack(side="bottom", fill="x", pady=(0, 0))

        footer_label = ttk.Label(footer_frame, text="¬© 2025 –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        footer_label.pack(side="bottom", pady=5)

    def load_data(self):
        try:
            conn = get_connection()
            query = 'SELECT –ö–æ–¥, –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–∏–∑, –ø—Ä–∏–±—ã—Ç–∏–µ_–≤, –≤—Ä–µ–º—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç FROM –ê–≤–∏–∞—Ä–µ–π—Å—ã'
            cursor = conn.cursor()
            cursor.execute(query)
            data = cursor.fetchall()

            for widget in self.canvas_frame.winfo_children():
                widget.destroy()

            for row in data:
                self.add_booking_row(row)

            self.canvas.config(scrollregion=self.canvas.bbox("all"))

            cursor.close()
            conn.close()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n{e}")

    def add_booking_row(self, row):
        booking_frame = ttk.Frame(self.canvas_frame, padding=10)
        booking_frame.pack(fill="x", pady=5, padx=10)

        if self.booking_icon:
            icon_label = ttk.Label(booking_frame, image=self.booking_icon)
            icon_label.image = self.booking_icon
            icon_label.grid(row=0, column=0, padx=10, rowspan=6)

        self.add_field(booking_frame, f"–ö–æ–¥: {row[0]}", self.code_icon, 1)
        self.add_field(booking_frame, f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {row[1]}", self.airline_icon, 2)
        self.add_field(booking_frame, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑: {row[2]}", self.departure_icon, 3)
        self.add_field(booking_frame, f"–ü—Ä–∏–±—ã—Ç–∏–µ –≤: {row[3]}", self.arrival_icon, 4)
        self.add_field(booking_frame, f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {row[4]}", self.departure_time_icon, 5)
        self.add_field(booking_frame, f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {row[5]}", self.arrival_time_icon, 6)
        self.add_field(booking_frame, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {row[6]}", self.number_of_seats_icon, 7)

        edit_btn = ttk.Button(booking_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=lambda r=row: self.open_edit_window(r))
        edit_btn.grid(row=0, column=2, padx=10, pady=5)

    def add_field(self, frame, text, icon, row):
        field_frame = ttk.Frame(frame)
        field_frame.grid(row=row - 1, column=1, sticky="w")

        if icon:
            icon_label = ttk.Label(field_frame, image=icon)
            icon_label.image = icon
            icon_label.pack(side="left", padx=(0, 5))

        text_label = ttk.Label(field_frame, text=text)
        text_label.pack(side="left")

    def open_edit_window(self, row):
        edit_window = tk.Toplevel(self.root)
        edit_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ê–≤–∏–∞—Ä–µ–π—Å")
        edit_window.geometry("400x300")
        edit_window.configure(bg="#FFFFFF")

        labels = ["–ö–æ–¥", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑", "–ü—Ä–∏–±—ã—Ç–∏–µ –≤", "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"]
        self.entries = {}

        for i, label_text in enumerate(labels):
            label = ttk.Label(edit_window, text=label_text)
            label.grid(row=i, column=0, padx=5, pady=5, sticky="w")

            entry = ttk.Entry(edit_window, width=30)
            entry.grid(row=i, column=1, padx=5, pady=5)
            entry.insert(0, row[i])

            self.entries[label_text] = entry

        update_btn = ttk.Button(edit_window, text="–û–±–Ω–æ–≤–∏—Ç—å", command=lambda: self.update_Flights(row[0], edit_window))
        update_btn.grid(row=len(labels), column=0, columnspan=2, pady=10)

    def update_Flights(self, flight_code, edit_window):
        new_flight_code = self.entries["–ö–æ–¥"].get()
        new_airline = self.entries["–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è"].get()
        new_departure_from = self.entries["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑"].get()
        new_arrival_to = self.entries["–ü—Ä–∏–±—ã—Ç–∏–µ –≤"].get()
        new_departure_time = self.entries["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"].get()
        new_arrival_time = self.entries["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"].get()
        new_seat_count = self.entries["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"].get()

        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE –ê–≤–∏–∞—Ä–µ–π—Å—ã SET –ö–æ–¥=?, –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è=?, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–∏–∑=?, –ø—Ä–∏–±—ã—Ç–∏–µ_–≤=?, –≤—Ä–µ–º—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è=?, –≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è=?, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç=? WHERE –ö–æ–¥=?",
                (new_flight_code, new_airline, new_departure_from, new_arrival_to, new_departure_time, new_arrival_time, new_seat_count, flight_code)
            )
            conn.commit()
            cursor.close()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –∞–≤–∏–∞—Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            self.load_data()
            edit_window.destroy()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def load_table_data(self):
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT –ö–æ–¥, –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–∏–∑, –ø—Ä–∏–±—ã—Ç–∏–µ_–≤, –≤—Ä–µ–º—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç FROM –ê–≤–∏–∞—Ä–µ–π—Å—ã")
            bookings = cursor.fetchall()

            self.seat_table.delete(*self.seat_table.get_children())
            for booking in bookings:
                self.seat_table.insert("", "end", values=booking)

            cursor.close()
            conn.close()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def add_flight(self):
        try:
            code = int(self.entries["–ö–æ–¥"].get())
            airline = self.entries["–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è"].get().strip()
            departure_from = self.entries["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑"].get().strip()
            arrival_to = self.entries["–ü—Ä–∏–±—ã—Ç–∏–µ –≤"].get().strip()
            seats_available = int(self.entries["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"].get())
            departure_time = self.entries["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"].get().strip()
            arrival_time = self.entries["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"].get().strip()

            try:
                departure_time = datetime.strptime(departure_time, "%Y-%m-%d %H:%M:%S")
                arrival_time = datetime.strptime(arrival_time, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM:SS")
                return

        except ValueError as e:
            messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
            return

        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO –ê–≤–∏–∞—Ä–µ–π—Å—ã (–ö–æ–¥, –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–∏–∑, –ø—Ä–∏–±—ã—Ç–∏–µ_–≤, –≤—Ä–µ–º—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è_–ø—Ä–∏–±—ã—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–µ—Å—Ç) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (code, airline, departure_from, arrival_to, departure_time, arrival_time, seats_available)
            )
            conn.commit()
            cursor.close()
            conn.close()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤–∏–∞—Ä–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω.")
            self.load_table_data()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤–∏–∞—Ä–µ–π—Å: {e}")

    def open_flights_management(self):
        management_window = tk.Toplevel(self.root)
        management_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∏–∞—Ä–µ–π—Å–∞–º–∏")
        management_window.geometry("1000x600")
        management_window.configure(bg="#FFFFFF")

        title_label = ttk.Label(management_window, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤–∏–∞—Ä–µ–π—Å–∞–º–∏")
        title_label.pack(pady=10)

        fields_frame = ttk.Frame(management_window)
        fields_frame.pack(pady=10)

        labels = ["–ö–æ–¥", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑", "–ü—Ä–∏–±—ã—Ç–∏–µ –≤", "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"]
        self.entries = {}

        for i, label_text in enumerate(labels):
            label = ttk.Label(fields_frame, text=label_text)
            label.grid(row=i, column=0, padx=5, pady=5, sticky="w")

            entry = ttk.Entry(fields_frame, width=30)
            entry.grid(row=i, column=1, padx=5, pady=5)

            self.entries[label_text] = entry

        btn_frame = ttk.Frame(management_window)
        btn_frame.pack(pady=10)

        add_btn = ttk.Button(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_flight)
        add_btn.grid(row=0, column=0, padx=5, pady=5)

        columns = ("–ö–æ–¥", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑", "–ü—Ä–∏–±—ã—Ç–∏–µ –≤", "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
        self.seat_table = ttk.Treeview(management_window, columns=columns, show="headings", height=10)

        for col in columns:
            self.seat_table.heading(col, text=col)
            self.seat_table.column(col, width=140, anchor="center")

        self.seat_table.pack(padx=10, pady=10, fill="both", expand=True)

        self.load_table_data()